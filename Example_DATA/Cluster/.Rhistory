##                                                                           ##
##    Erzeugt 2 Plots:                                                       ##
##    1) "Monodominance_rel_abundance.png"                                   ##
##        Hier wird die relative Abundanz der Monodominanten Art über        ##
##        die Propagule Pressure aufgetragen (als Mittelwerte über alle      ##
##        bisher erfassten Läufe). Dabei werden verschiedene Weltgrößen      ##
##        aufgetragen (aktuell: 100, 150, 200, 256)                          ##
##                                                                           ##
##   2)  "Monodominance_biggest_cluster.png"                                 ##
##        Hier wird die relative Größe des größten Clusters für die o.g.     ##
##        Weltgrößen über der Propagule pressure aufgetragen.                ##
##        Es ist hier irrelevant, ob der Cluster perkoliert oder nicht.      ##
###############################################################################
library(ggplot2)
library(grid)
source("~/Arbeitsfläche/Code_Server/R_Scripte/binder_cluster_function.R")
# read data:
setwd("~/Arbeitsfläche/Code_Server/")
radius_vec = c(20) #c(1,3,5,7,10,15,20,30)
size_vec <- c(128, 256, 512, 768)
for(radius in radius_vec)
{
zusammen<-data.frame(size_martin = NA, propagule = NA, seed_martin = NA, rel_abundance = NA, cluster = NA)
if (radius == 30)
{
prop_v <-c(9400, 9500, 9550, 9600, 9625, 9650, 9675, 9700, 9725, 9750, 9775, 9800, 9850, 9900, 9950, 10000)
}
if(radius ==20)
{
prop_v <- c(9100, 9200, 9250, 9300, 9350, 9400, 9425,  9450, 9475, 9490, 9500, 9510, 9525, 9550, 9575, 9600, 9625, 9650, 9675, 9700, 9750, 9800, 9900)
size_vec <- c(128, 256, 512, 768)
}
if (radius == 15)
{
prop_v <-  c( 9200, 9250, 9300, 9325, 9350, 9375,9400, 9425, 9450, 9475, 9500, 9525, 9550, 9600, 9650, 9700)
}
if (radius == 10)
{
size_vec <- c(128, 256, 512)
prop_v <- c( 9000, 9100, 9150, 9200, 9250, 9300, 9350, 9400,  9450,  9500,  9550)
}
if (radius == 7)
{
prop_v <- c(8000, 8500, 8700, 9000, 9200, 9250, 9300, 9325, 9350, 9375, 9400, 9425, 9450, 9475, 9500, 9600, 9700)
}
if (radius == 5)
{
prop_v <- c(7000, 7300, 7500, 7800, 8000, 8300, 8500, 8700, 9000)
}
if (radius == 3)
{
prop_v <-c(8000, 8500, 8700, 9000, 9200, 9250, 9325, 9350, 9375, 9400, 9425, 9450, 9475, 9500, 9600, 9700)
}
if (radius == 1)
{
prop_v <-c(5000, 5500, 6000, 7000, 7300, 7500, 7800, 8000)
}
for(size_w in size_vec)
{
for(prop in prop_v)
{
string<-paste("~/Arbeitsfläche/Code_Server/Data/Ergebnisse/radius",radius,"/Martins_Monodominance_Stats_size_",size_w,"_prop_", prop,"_radius_",radius,".txt",sep="")
Statistik<-as.matrix(read.table(string, header=F, sep="\t"))
new<-data.frame(size_martin = Statistik[,1],propagule =Statistik[,2], seed_martin=Statistik[,3], rel_abundance = Statistik[,7], cluster = Statistik[,6])
zusammen<-rbind(zusammen, new)
}
}
zusammen<-na.omit(zusammen)
attach(zusammen)
#define variables
size_v<-vector(length=1)
propagule_v<-vector(length=1)
abundance_v<-vector(length=1)
abundance_std_v<-vector(length=1)
cluster_v<-vector(length=1)
i = 1;
for(prop in prop_v)
{
for(size_w in size_vec)
{
abundance_v[i] = mean(rel_abundance[size_martin==size_w & propagule==prop])
abundance_std_v[i] = sd(rel_abundance[size_martin==size_w & propagule==prop])#/sqrt(length(rel_abundance[size_martin==size_w & propagule==prop]))
size_v[i] = size_w
propagule_v[i] = prop
cluster_v[i] = mean(cluster[size_martin==size_w & propagule==prop])
i = i+1;
}
}
results<-data.frame(size=size_v,propagule=propagule_v,rel_abundance=abundance_v, cluster = cluster_v, abundance_std = abundance_std_v)
attach(results)
######################  Plot routines  ###############################
cols <- c( "128" = "darkviolet", "256" = "darkgreen", "512" = "blue", "768" = "black")
################### relative abundance ################################
p<-ggplot(results, aes(x = propagule, y = rel_abundance, group = size))
p <- p + geom_line(aes(x = propagule, y = rel_abundance, color = as.factor(size)))
p<- p  + scale_colour_manual("Size",values = cols)
p <- p + geom_errorbar(aes(x = propagule, ymax = rel_abundance+abundance_std/2, ymin = rel_abundance-abundance_std/2, color = as.factor(size)))
p <- p+ xlab("Propagule pressure") + ylab("Relative abundance")
p <- p + labs(title = "Relative abundance of monodom. species")
# make description of axes bigger and thus more readable
p<- p + theme(plot.title = element_text(size = rel(1.5)))
p<- p + theme(axis.text.x = element_text(size = rel(1.5)))
p<- p + theme(axis.text.y = element_text(size = rel(1.5)))
p<- p + theme(axis.title.x  = element_text(size = rel(1.3)))
p<- p + theme(axis.title.y  = element_text(size = rel(1.3)))
p<- p + theme(legend.title  = element_text(size = rel(1.2)))
p<- p + theme(legend.text  = element_text(size = rel(1.2)))
p
ggsave(p, file=paste("Bilder/Phasenübergänge/abundance/Monodominance_rel_abundance_radius",radius,".png"))
#
#################### Size of biggest cluster: ########################
# plot inlay: binder cumulant of size of biggest cluster
binderbild <-binder_cluster()
png("Bilder/Phasenübergänge/binder/Cluster_size_subplot.png", width = 800, height = 600)
p2<-ggplot(results, aes(x = propagule, y = cluster, group = size))
p2 <- p2 + geom_line(aes(x = propagule, y = cluster, color = as.factor(size)))
p2 <- p2  + scale_colour_manual("grid size", values = cols)
p2 <- p2+ xlab("Propagule pressure") + ylab("size biggest cluster")
p2 <- p2 + labs(title = "Size of biggest Cluster")
# make description of axes bigger and thus more readable
p2<- p2 + theme(plot.title = element_text(size = rel(1.5)))
p2<- p2 + theme(axis.text.x = element_text(size = rel(1.5), color = "black"))
p2<- p2 + theme(axis.text.y = element_text(size = rel(1.5), color = "black"))
p2<- p2 + theme(axis.title.x  = element_text(size = rel(1.3)))
p2<- p2 + theme(axis.title.y  = element_text(size = rel(1.3)))
p2<- p2 + theme(legend.title  = element_text(size = rel(1.2)))
p2<- p2 + theme(legend.text  = element_text(size = rel(1.2)))  +  xlim(9100, 9900)
p2<- p2 + theme(panel.background =  element_rect(fill = 'white', colour = 'black'))
# A viewport that takes up half the width and half the height, located
# in the middle of the plot.
vp_test <- viewport(width = 0.35, height = 0.37, x = 0.3, y = 0.7)
csmall <- binderbild  + labs(x = NULL, y = NULL)  + theme(legend.position = "none")+ theme(plot.margin = unit(c(0,1,0,0), "lines"))
csmall <- csmall + theme(panel.background =  element_rect(fill = 'white', colour = 'black'))
p2
print(p2)
print(csmall, vp = vp_test)
dev.off()
#ggsave(p2, file=paste("Bilder/Phasenübergänge/abundance/Monodominance_biggest_cluster_radius",radius,".png"))
}
library(ggplot2)
# read data:
setwd("~/Arbeitsfläche/Code_Server/")
radius_vec = c(1,3,5,7,10,15,20,30)
size_vec <- c(128, 256, 512, 768)
for(radius in radius_vec)
{
zusammen<-data.frame(size_martin = NA, propagule = NA, seed_martin = NA, size_big = NA, size_nonperko = NA)
if (radius == 30)
{
prop_v <-c(9400, 9500, 9550, 9600, 9625, 9650, 9675, 9700, 9725, 9750, 9775, 9800, 9850, 9900, 9950, 10000)
size_vec <- c(128, 256, 512, 768)
}
if(radius ==20)
{
prop_v <- c(9200, 9250, 9300, 9350, 9400, 9425,  9450, 9475, 9490, 9500, 9510, 9525, 9550, 9575, 9600, 9625, 9650, 9675, 9700, 9750, 9800, 9900)
size_vec <- c(128, 256, 512, 768)
}
if (radius == 15)
{
prop_v <-  c( 9200, 9250, 9300, 9325, 9350, 9375,9400, 9425, 9450, 9475, 9500, 9525, 9550, 9600, 9650, 9700)
}
if (radius == 10)
{
prop_v <- c(9200, 9250, 9300, 9350, 9400,  9450,  9500,  9550)
}
if (radius == 7)
{
prop_v <- c(8000, 8500, 8700, 9000, 9200, 9250, 9300, 9325, 9350, 9375, 9400, 9425, 9450, 9475, 9500, 9600, 9700)
}
if (radius == 5)
{
prop_v <- c(7000, 7300, 7500, 7800, 8000, 8300, 8500, 8700, 9000)
}
if (radius == 3)
{
prop_v <-c(8000, 8500, 8700, 9000, 9200, 9250, 9325, 9350, 9375, 9400, 9425, 9450, 9475, 9500, 9600, 9700)
}
if (radius == 1)
{
prop_v <-c(5000, 5500, 6000, 7000, 7300, 7500, 7800, 8000)
}
for(size_w in size_vec)
{
for(prop in prop_v)
{
string<-paste("~/Arbeitsfläche/Code_Server/Data/Ergebnisse/radius",radius,"/Martins_Monodominance_Stats_size_",size_w,"_prop_", prop,"_radius_",radius,".txt",sep="")
Statistik<-as.matrix(read.table(string, header=F, sep="\t"))
new<-data.frame(size_martin = Statistik[,1],propagule =Statistik[,2], seed_martin=Statistik[,3], size_big = Statistik[,6], size_nonperko= Statistik[,8])
zusammen<-rbind(zusammen, new)
}
}
zusammen<-na.omit(zusammen)
attach(zusammen)
size_v<-vector(length=6)
propagule_v<-vector(length=6)
wahrscheinlichkeit_v<-vector(length = 6)
i = 1;
for(prop in  prop_v)
{
for(size_w in size_vec)
{
count = length(size_big[size_martin==size_w & propagule==prop])
gewonnen = length(subset(size_big[size_martin==size_w & propagule==prop],  size_big[size_martin==size_w & propagule==prop] != size_nonperko[size_martin==size_w & propagule==prop]))
wahrscheinlichkeit_v[i] = gewonnen/ count
size_v[i] = size_w
propagule_v[i] = prop
i = i+1;
}
}
results<-data.frame(size=size_v,propagule=propagule_v, wahrscheinlichkeit=wahrscheinlichkeit_v)
######################  Plot routines  ###############################
attach(results)
# scale colours:
cols <- c( "128" = "darkviolet", "256" = "blue", "512" = "darkgreen", "768" = "black")
################### relative abundance ################################
p<-ggplot(results, aes(x = propagule, y = wahrscheinlichkeit, group = size))
p <- p + geom_line(aes(x = propagule, y = wahrscheinlichkeit, color = as.factor(size))) + scale_colour_manual("size",values = cols)
p <- p+ xlab("Propagule pressure") + ylab("probability(world overtake)")
p <- p + labs(title = "Probability of percolating cluster")
# make description of axes bigger and thus more readable
p<- p + theme(plot.title = element_text(size = rel(1.5)))
p<- p + theme(axis.text.x = element_text(size = rel(1.5)))
p<- p + theme(axis.text.y = element_text(size = rel(1.5)))
p<- p + theme(axis.title.x  = element_text(size = rel(1.5)))
p<- p + theme(axis.title.y  = element_text(size = rel(1.5)))
p<- p + theme(legend.title  = element_text(size = rel(1.3)))
p
name<-paste("Bilder/Phasenübergänge/Monodominance_wahrscheinlichkeit_perkolation_radius",radius,".png")
ggsave(p, file=name)
#
}
#######################    Cluster_Bild.R   ##################################
## Januar 2015           von Pia Backmann                 Für Martin        ##
##                                                                          ##
##   Plottet alle Cluster der Monodominanten Art (jeder Cluster bekommt     ##
##   eine andere Farbe zugewiesen). Die anderen Felder, die von             ##
##   nicht-Monodominanten Arten besetzt sind, bleiben weiß.                 ##
##                                                                          ##
##   Speichert Bild unter:                                                  ##
##  "MartinsClusterView_size_XXX_propagule_XXXX_seed_XX_tick_XXXXX.png"     ##
##############################################################################
library(ggplot2)
size = 512
propagule = 9515
setwd("~/Arbeitsfläche/Code_Server/Data/Cluster/")
current = 500
factor = 1
string<-paste("~/Arbeitsfläche/Code_Server/Data/Cluster/MartinsClusterView_size_",size,"_propagule_",propagule,"_radius_20_mort_0.015000_seed_4_tick_2000.out", sep="")
cluster_view<-as.matrix(read.table(string, header=F))
before<-cluster_view
string<-paste("~/Arbeitsfläche/Code_Server/Data/Cluster/MartinsClusterView_size_",size,"_propagule_",propagule,"_radius_20_mort_0.015000_seed_4_tick_2.out", sep="")
cluster_view<-as.matrix(read.table(string, header=F))
initial_maximum = max(cluster_view)+1
# Definiere Farbpalette
meineFarben = rainbow(initial_maximum)
meineFarben = rep(meineFarben,200)
meineFarben = c("white", meineFarben)
#######   hier würde for-schleife anfangen   ########
increment<-seq(from=100, to=10000, by=100)
ticker<-c(2, increment)
for (tick in ticker)
{
string<-paste("~/Arbeitsfläche/Code_Server/Data/Cluster/MartinsClusterView_size_",size,"_propagule_",propagule,"_radius_20_mort_0.015000_seed_4_tick_",tick,".out", sep="")
cluster_view<-as.matrix(read.table(string, header=F))
aktuell<-cluster_view
if(tick >= 2100)
{
#finde größten cluster, zweitgrößten cluster und drittgrößten cluster (heuristischer ansatz)
max_cluster = 0
second = 0
third = 0
forth = 0
fifth = 0
sixth = 0
y_biggest_cluster_old = -20
y_second_cluster_old = -20
y_third_cluster_old = -20
y_forth_cluster_old = -20
y_fifth_cluster_old = -20
y_biggest_cluster_new = -20
y_second_cluster_new = -20
y_third_cluster_new = -20
y_forth_cluster_new = -20
y_fifth_cluster_new = -20
y_sixth_cluster_new = -20
max_size = max(before)
for(i in 0:max_size)
{
count = length(which(before == i))
if(max_cluster < count)
{
sixth = fifth
y_sixth_cluster_old = y_fifth_cluster_old
fifth = forth
y_fifth_cluster_old = y_forth_cluster_old
forth = third
y_forth_cluster_old = y_third_cluster_old
third = second
y_third_cluster_old = y_second_cluster_old
second = max_cluster
y_second_cluster_old = y_biggest_cluster_old
y_biggest_cluster_old = i
max_cluster = count
}
else if(second < count)
{
sixth = fifth
y_sixth_cluster_old = y_fifth_cluster_old
fifth = forth
y_fifth_cluster_old = y_forth_cluster_old
forth = third
y_forth_cluster_old = y_third_cluster_old
third = second
y_third_cluster_old = y_second_cluster_old
second = count
y_second_cluster_old = i
}
else if(third < count)
{
sixth = fifth
y_sixth_cluster_old = y_fifth_cluster_old
fifth = forth
y_fifth_cluster_old = y_forth_cluster_old
forth = third
y_forth_cluster_old = y_third_cluster_old
third = count
y_third_cluster_old = i
}
else if(forth < count)
{
sixth = fifth
y_sixth_cluster_old = y_fifth_cluster_old
fifth = forth
y_fifth_cluster_old = y_forth_cluster_old
forth = count
y_forth_cluster_old = i
}
else if(fifth < count)
{
sixth = fifth
y_sixth_cluster_old = y_fifth_cluster_old
fifth = count
y_fifth_cluster_old = i
}
else if(fifth < count)
{
sixth = count
y_sixth_cluster_old = i
}
}
if(max_cluster > 1)
{
biggest_x_before<-which(before == y_biggest_cluster_old)
biggest_y_now<-aktuell[biggest_x_before]
#finde größten cluster
max = 0
max_size_cluster = max(biggest_y_now)
for(i in 0:max_size_cluster)
{
count = length(which(biggest_y_now == i))
if( count > 0 && max < count)
{
max = count
y_biggest_cluster_new = i
}
}
biggest_x_now<-which(aktuell == y_biggest_cluster_new)
cluster_view[biggest_x_now] = y_biggest_cluster_old
}
if(second > 1)
{
second_x_before<-which(before == y_second_cluster_old)
second_y_now<-aktuell[second_x_before]
#finde zweit-größten cluster
max_second = 0
second_size_cluster = max(second_y_now)
for(i in 0:second_size_cluster)
{
count = length(which(second_y_now == i))
if(count > 0 && max_second < count && i != y_biggest_cluster_new)
{
max_second = count
y_second_cluster_new = i
}
}
second_x_now<-which(aktuell == y_second_cluster_new)
cluster_view[second_x_now] = y_second_cluster_old
}
if(third > 1)
{
third_x_before<-which(before == y_third_cluster_old)
third_y_now<-aktuell[third_x_before]
#finde dritt-größten cluster
max_third = 0
third_size_cluster = max(third_y_now)
for(i in 0:third_size_cluster)
{
count = length(which(third_y_now == i))
if(count > 0 && max_third < count && i != y_second_cluster_new && i != y_biggest_cluster_new)
{
max_third = count
y_third_cluster_new = i
}
}
third_x_now<-which(aktuell == y_third_cluster_new)
cluster_view[third_x_now] = y_third_cluster_old
}
if(forth > 1)
{
forth_x_before<-which(before == y_forth_cluster_old)
forth_y_now<-aktuell[forth_x_before]
#finde dritt-größten cluster
max_forth = 0
forth_size_cluster = max(forth_y_now)
for(i in 0:forth_size_cluster)
{
count = length(which(forth_y_now == i))
if(count > 0 && max_forth < count && i != y_third_cluster_new && i != y_second_cluster_new && i != y_biggest_cluster_new)
{
max_forth = count
y_forth_cluster_new = i
}
}
forth_x_now<-which(aktuell == y_forth_cluster_new)
cluster_view[forth_x_now] = y_forth_cluster_old
}
if(fifth > 1)
{
fifth_x_before<-which(before == y_fifth_cluster_old)
fifth_y_now<-aktuell[fifth_x_before]
#finde dritt-größten cluster
max_fifth = 0
fifth_size_cluster = max(fifth_y_now)
for(i in 0:fifth_size_cluster)
{
count = length(which(fifth_y_now == i))
if(count > 0 && max_fifth < count && i != y_forth_cluster_new && i != y_third_cluster_new  && i != y_second_cluster_new && i != y_biggest_cluster_new)
{
max_fifth = count
y_fifth_cluster_new = i
}
}
fifth_x_now<-which(aktuell == y_fifth_cluster_new)
cluster_view[fifth_x_now] = y_fifth_cluster_old
}
if(sixth > 1)
{
sixth_x_before<-which(before == y_sixth_cluster_old)
sixth_y_now<-aktuell[sixth_x_before]
#finde dritt-größten cluster
max_sixth = 0
sixth_size_cluster = max(sixth_y_now)
for(i in 0:sixth_size_cluster)
{
count = length(which(sixth_y_now == i))
if(count > 0 && max_sixth < count && i != y_sixth_cluster_new &&  i != y_forth_cluster_new && i != y_third_cluster_new  && i != y_second_cluster_new && i != y_biggest_cluster_new)
{
max_fifth = count
y_fifth_cluster_new = i
}
}
sixth_x_now<-which(aktuell == y_sixth_cluster_new)
cluster_view[sixth_x_now] = y_sixth_cluster_old
}
show(paste("#############################   tick = ", tick, "   ###############################", sep=""))
show(paste("First old = ", y_biggest_cluster_old, "  first new = ", y_biggest_cluster_new, " || size_old = ", max_cluster, "  size_new = ", max ,sep=""))
show(paste("Second old = ", y_second_cluster_old, "  second new = ", y_second_cluster_new, " || size_old = ", second, "  size_new = ", max_second  ,sep=""))
show(paste("Third old = ", y_third_cluster_old, "  third new = ", y_third_cluster_new, " || size_old = ", third , "  size_new = ", max_third , sep=""))
show(paste("Forth old = ", y_forth_cluster_old, "  forth new = ", y_forth_cluster_new, " || size_old = ", forth, "  size_new = ", max_forth , sep=""))
show("#####################################################################")
}
########################################################################################
# Speichere Plot ab
if(tick < 10000)
{
name=paste("~/Arbeitsfläche/Code_Server/Bilder/Cluster/MartinsClusterView_size_",size,"_propagule_",propagule,"_radius_20_mort_0.015000_seed_4_tick_0", tick,".png", sep="")
name_alt=paste("~/Arbeitsfläche/Code_Server/Bilder/Cluster/MartinsClusterView_size_",size,"_propagule_",propagule,"_radius_20_mort_0.015000_seed_4_tick_0", tick,"_alt.png", sep="")
}
if(tick < 1000)
{
name=paste("~/Arbeitsfläche/Code_Server/Bilder/Cluster/MartinsClusterView_size_",size,"_propagule_",propagule,"_radius_20_mort_0.015000_seed_4_tick_00", tick,".png", sep="")
}
if(tick < 100)
{
name=paste("~/Arbeitsfläche/Code_Server/Bilder/Cluster/MartinsClusterView_size_",size,"_propagule_",propagule,"_radius_20_mort_0.015000_seed_4_tick_000", tick,".png", sep="")
}
if(tick < 10)
{
name=paste("~/Arbeitsfläche/Code_Server/Bilder/Cluster/MartinsClusterView_size_",size,"_propagule_",propagule,"_radius_20_mort_0.015000_seed_4_tick_0000", tick,".png", sep="")
}
if(tick%%current == 0)
{
factor = factor+1
current = 500*factor
}
tickstr = paste("tick < ", current)
png(filename=name, width=1000,height=1000)
#    bg="white")
image( 1:ncol(cluster_view),1:nrow(cluster_view), cex.lab=2, cex.main = 2, t(cluster_view), xlab=tickstr, ylab = "", main = "Monodominance cluster formation view"
, col=meineFarben, axes=FALSE, zlim=c(-1, initial_maximum))
dev.off()
if(tick > 10000)
{
png(filename=name_alt, width=1000,height=1000)
#    bg="white")
image( 1:ncol(aktuell),1:nrow(aktuell), cex.lab=2, cex.main = 2, t(aktuell), xlab=tickstr, ylab = "", main = "Monodominance cluster formation view"
, col=meineFarben, axes=FALSE, zlim=c(-1, max_size))
dev.off()
}
#speichere neue matrix als alte ab für nächstes bild
before=cluster_view
}
